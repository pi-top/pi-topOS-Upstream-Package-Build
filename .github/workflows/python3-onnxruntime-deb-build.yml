name: Debian Packaging for CPython Packages from pre-built Python wheels

on:
  workflow_dispatch:
  push:
    paths:
      - ".github/workflows/python3-onnxruntime-deb-build.yml"
      - "python3-onnxruntime/*.whl"
  pull_request:
    branches:
      - master

env:
  DEB_BUILD_DOCKER_IMAGE: "pitop/pi-top-os-deb-build"
  DEB_BUILD_DOCKER_TAG: "bullseye-master"
  CHANGELOG_AUTHOR_NAME: "pi-top"
  CHANGELOG_AUTHOR_EMAIL: "deb-maintainers@pi-top.com"
  PACKAGECLOUD_REPO: "experimental"
  OS: "debian"
  DISTRO: "bullseye"

jobs:
  build-debian-package:
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false
      matrix:
        include:
          - debian_architecture: "armhf"
            docker_architecture: "linux/arm/v7"

          - debian_architecture: "arm64"
            docker_architecture: "linux/arm64"

    steps:
      # Checkout, only keep onnxruntime
      - name: Checkout code
        uses: actions/checkout@v2.3.4

      - name: Build in ARM Docker container
        run: |
          ls -lR
          docker run --rm --privileged tonistiigi/binfmt --install all

          docker run -i \
            --volume ${{ github.workspace }}:${{ github.workspace }} \
            --workdir=${{ github.workspace }} \
            --platform ${{ matrix.docker_architecture }} \
            ${{ env.OS }}:${{ env.DISTRO }} \
            /bin/bash -s <<EOF
              apt-get update
              apt install -y python3-apt apt-file dpkg-dev fakeroot build-essential devscripts debhelper
              apt-file update
              apt-get install -y debhelper dh-python python3-all-dev python3-setuptools python3-pip
              pip3 install wheel2deb
              cd ./python3-onnxruntime/${{ matrix.debian_architecture }}
              wheel2deb --revision ${{ github.run_number }} --verbose
              wheel2deb build --verbose
          EOF

          ls -lR

      - name: Generate artifact name
        run: |
          echo "ARTIFACT_PREFIX=$(basename -s .dsc "$(find ./python3-onnxruntime/${{ matrix.debian_architecture }}/output -name "*.dsc")")" >> $GITHUB_ENV

      - name: Upload binary package artifacts
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.ARTIFACT_PREFIX }}.deb
          path: ./python3-onnxruntime/${{ matrix.debian_architecture }}/output/*.deb

      - name: Upload source package artifacts
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.ARTIFACT_PREFIX }}.deb-src
          path: ./python3-onnxruntime/${{ matrix.debian_architecture }}/output/*.tar.*

      - name: Upload package build metadata artifacts
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.ARTIFACT_PREFIX }}.metadata
          path: |
            ./python3-onnxruntime/${{ matrix.debian_architecture }}/output/**
            !./python3-onnxruntime/${{ matrix.debian_architecture }}/output/*.deb
            !./python3-onnxruntime/${{ matrix.debian_architecture }}/output/*.tar.*

      - name: Upload .dsc to PackageCloud
        uses: pi-top/ghaction-packagecloud@main
        # Only 1 .dsc is required for source so take armhf if there's multiple
        if: |
          (
            github.ref == 'refs/heads/master' &&
            (
              matrix.debian_architecture == 'amd64' ||
              matrix.debian_architecture == 'armhf'
            )

          )
        with:
          repository: ${{ env.PACKAGECLOUD_REPO }}/${{ env.OS }}/${{ env.DISTRO }}
          files: |
            ./python3-onnxruntime/${{ matrix.debian_architecture }}/output/*.dsc
        env:
          PACKAGECLOUD_TOKEN: ${{ secrets.PACKAGECLOUD_TOKEN }}

      - name: Upload .deb to PackageCloud
        if: ${{ github.ref == 'refs/heads/master' }}
        uses: pi-top/ghaction-packagecloud@main
        with:
          repository: ${{ env.PACKAGECLOUD_REPO }}/${{ env.OS }}/${{ env.DISTRO }}
          files: |
            ./python3-onnxruntime/${{ matrix.debian_architecture }}/output/*.deb
        env:
          PACKAGECLOUD_TOKEN: ${{ secrets.PACKAGECLOUD_TOKEN }}
